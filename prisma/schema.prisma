generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Post {
  id                String           @id @default(uuid())
  namePost          String
  title             String
  category          Float
  content           String?
  resume            String?
  tagPost           String?
  coverURL          String?
  published         Boolean          @default(false)
  authorId          String?
  newspaperColumnID String?
  dateCreate        DateTime         @default(now())
  topNews           Float            @default(0)
  dateEvent         DateTime         @default(now())
  author            User?            @relation(fields: [authorId], references: [id])
  newspaperColumn   NewspaperColumn? @relation(fields: [newspaperColumnID], references: [id])
  images            Image[]          @relation("PostImages")
  videos            Video[]          @relation("PostVideos")
}

model Image {
  id    Int      @id @default(autoincrement())
 
  title       String
  description String?
  pathURL     String   @unique
  published   Boolean  @default(false)
  authorId    String?
  dateCreate  DateTime @default(now())
  nameFile    String   @default("")
  vehicleIDs  String[]
 
  author      User?    @relation(fields: [authorId], references: [id])
  posts       Post[]   @relation("PostImages")
}

model Video {
  id          String   @id @default(uuid())
  title       String
  nameFile    String   @default("")
  description String?
  duration    Float            @default(0)
  pathURL     String   @unique
  published   Boolean  @default(false)
  authorId    String?
  dateCreate  DateTime @default(now())
  vehicleIDs  String[]
  author      User?    @relation(fields: [authorId], references: [id])
  posts       Post[]   @relation("PostVideos")
  schedule ScheduleLiveTv[] // Relacionamento com Programação
}

model ScheduleLiveTv {
  id            String  @id @default(uuid())
  videoId       String
  video         Video   @relation(fields: [videoId], references: [id])
  startTime String  // Exemplo: "14:50"
  endTime   String 
  dayWeek     Int     // 0 = Domingo, 6 = Sábado, 7 = todos
  createdAt     DateTime @default(now())
}


model BookOrder {
  id               String       @id @default(uuid())
  title            String?
  description      String?
  request          Boolean      @default(false)
  processing       Boolean      @default(false)
  costValue        Float
  concluded        Boolean      @default(false)
  bookURL          String?
  requestingUserId String?
  dateCreate       DateTime     @default(now())
  dateUpdate       DateTime     @default(now())
  paymentAccept    Boolean      @default(false)
  unit             Float
  requestingUser   User?        @relation(fields: [requestingUserId], references: [id])
  orderImages      OrderImage[]
}

model OrderImage {
  id           String    @id @default(uuid())
  bookOrderId  String
  imageId      String
  requestImage Boolean   @default(false)
  addedAt      DateTime  @default(now())
  requestDate  DateTime  @default(now())
  description  String?
  comment      String?
  bookOrder    BookOrder @relation(fields: [bookOrderId], references: [id])

  @@unique([bookOrderId, imageId])
}

model Account {
  id                 String  @id @default(uuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String      @id @default(uuid())
  name             String?
  password         String?
  email            String?     @unique
  emailVerified    DateTime?
  image            String?
  phone            String?     @unique
  verificationCode String?
  UserRole         Float       @default(4)
  accounts         Account[]
  bookOrders       BookOrder[]
  imagens          Image[]
  posts            Post[]
  sessions         Session[]
  videos           Video[]
}

model NewspaperColumn {
  id         String @id @default(uuid())
  identifier String
  urlPerfil  String @default("WETBUS.png")
  posts      Post[]
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
